Estructura de funciones

Las funciones no pueden tener más de 50 líneas de código dentro. Esta es aproximadamente la cantidad de líneas que caben en un monitor horizontal al uso. Dicho de otra forma, la intención es poder ver la función de principio a fin sin necesidad de hacer scroll.

Una función más larga que eso, es sintomatica de saber hacer demasiadas cosas.


parametros

Los parametros de una función se listan en vertical, separados por un espacio a la derecha de cada coma.

const deploy = (app, host, port) => { /* ... */ }

Si la función tiene demasiados parametros, entonces se listan en horizontal.

const setDBConfig = (
  user,
  password,
  host,
  port,
  dialect,
  logs
) => { /* ... */ }

Alternativamente puedes saltar una línea y listar los parametros en vertivcal si caben dentro del límite de los 80 caracteres.

const setDBConfig = (
  user, password, host, port, dialect, logs
) => { /* ... */ }

Los parametros opcionales deben ir inicializados y van al final. El operador de asiganación lleva espacio en blanco a ambos lados.

const setDBConfig = (
  user,
  password,
  host = 'localhost',
  port = 3306,
  dialect = 'mysql',
  logs = console.log
) => { /* ... */ }

Las funciones no llevan saltos de línea dentro de su definición. Ver función pura más adelante.

Si tu función usa demasiados parametros, considera pedir en su lugar un solo objeto y desestructuralo en la firma. De esa forma le quitas el problema al usuario de tu función de recordar en qué orden pasar los parametros.

const notify = ({
  title: '',
  message: '',
  position: 'top-right',
  duration: 5000,
  closeButton: false,
  color: 'ok'
}) => { /* ... */ }

const notificationParams = { 
  title: 'Success', 
  message: 'The database got destroyed successfully!' 
}

notify(notificationParams)

Las funciones no se declaran dentro de otras funciones. Eso solo añade un nivel de identación extra y dificulta la lectura.

// incorrecto
const chargeClient = (client, products) => {
  const addDiscounts = () => { /* ... */ }
  const discountedProducts = products.map(p => ({ 
    ...p, 
    price: addDiscounts(p.price) 
  )}
  /* ... */
}

// correcto
const addDiscounts = () => { /* ... */ }

const chargeClient = (client, products) => {
  const discountedProducts = products.map(p => ({ 
    ...p, 
    price: addDiscounts(p.price) 
  )}
  /* ... */
}

Sin embargo, es posible que una función retorne otra función

const canAccess = permission => (req, res, next) => {
  if (!req.session) return res.status(403).send()
  const hasPermission = findPermision(req.session.id, permission)
  if (!hasPermission) return res.status(403).send()
  next()
}

router.get('salesReport', canAccess(SALES_REPORT), controller.get)

Al definir una función cuya firma debe coincidir con su implementación pero alguno de sus parametros no se utiliza, sustituyelo con _ para denostar que dicho parametro no se emplea.

// el parametro req no se usa, pero se necesita para cumplir con la firma.
const healthcheck = (_, res) => res.send()


Función pura

JavaScript es un lenguaje que te recompenza por seguir los principios del paradigma funcional, una de cuales máximas es el uso de funciones puras. Y por lo tanto, buscaremos acercarnos a dicho propósito... cuando tenga sentido hacerlo.

Una función pura es aquella que cumple con la definición matemática de función: Es el conjunto de todas las relaciónes de cada valor posible de X, cada cual hacia un valor único de Y.

Si tienes prepa trunca, solo enfocate en las siguientes caracteristicas: Acepta un único valor, realiza una unica acción y devuelve siempres el mismo output ante el mismo input (es determinista). Añadido a esto, la función no debe tener efectos secundarios como mutación de variables o llamadas a otros procesos (logs, storage, etc)

Entre más se áproxima una función a la definición de función pura, más minimalista es su escritura. No lleva parentesis cuando se pasa un solo parametro; no lleva llaves ni "return" cuando hace una sola cosa.

// inecesario
const findActionById = (id) => { return actions.find((a) => { return a.id === id) } }

// correcto
const findActionById = id => actions.find(a => a.id === id) 




Monads

Si tienes un objeto que acepta muchas configuraciones independientes pero consecutivas o muchas mutaciones, considera convertir las funciones de dicho objeto en monads.

// Demasiado redundante
document.cursor(10, 10)
document.setImage('src/assets/logo.png')
document.cursor(10, 70)
document.setFontSize(16)
document.setText('Reporte de ingresos mensuales')
document.cursor(10, 90)
document.setFontSize(12)
document.setText('...')
print(document)

// Más simple de comprender
document
  .cursor(10, 10)
  .setImage('src/assets/logo.png')
  .cursor(10, 70)
  .setFontSize(16)
  .setText('Reporte de ingresos mensuales')
  .cursor(10, 90)
  .setFontSize(12)
  .setText('...')
print(document)















Comentarios

"El código es como un chiste; si es bueno, no necesita que lo expliques"

Existen muchas razones, con motivaciones completamente diferentes para añadir comentarios. Algunas son aceptables y otras no. Se describen a continuación:



No guardes código en los comentarios.

Si crees que vas a necesitar un fragmento de código en un futuro pero justo ahora es irrelevante, borralo. Git ya se encargará por tí de recordar dicho código.



No uses comentarios para marcar secciones dentro del código.

Cuando un algoritmo se alarga demasiado es tentador añadir una separación, no solo de salto de línea, sino también para recordar en qué parte del proceso estás. Pero esto es, una vez más, el tratamiento de un sintoma en vez de su causa raíz.

En vez escribir un comentario explicando tu código, mueve tu código a otra función. A veces, intentar describir con comentarios como funciona el código termina ocultando las enditdades y los significados que de otra forma estarían obligados a emerger de la correcta declaración de variables.

// incorrecto
const getTaskById = async (req, res) => {
  try {
    // --------Validación del usuario
    const id = req.session.id
    if (!id) return res.status(403).send()
    // --------Busqueda en la base de datos
    const tasks = await db.tasks.findAll(/* ... */)
    // --------Limitar los resultados
    const validTasksOnly = task.filter(/* ... */)
    // --------Envio
    res.send(validTasksOnly)
  }
  catch (error) {
    res.status(500).send(error)
  }
}

// correcto, cada línea es su propia documentación
const getTasks = () => { /* ... */ }
const validTaskOnly = () => { /* ... */ }

const getTaskById = async (req, res) => {
  try {
    const id = req.session.id
    if (!id) return res.status(403).send()
    const tasks = await getTasks(id)
    res.send(validTasksOnly(tasks))
  }
  catch (error) {
    res.status(500).send(error)
  }
}



linters

Si tienes que decirle al linter que ignore la misma línea una y otra vez en cada archivo. Deberías replantearte si el linter está bien configurado.

useEffect(() => {
  setCartItems(await api.get('cart/items'))
// eslint-disable-next-line react-hooks/exhaustive-deps
}, [])



JSDocs

JSDocs es simplemente una convención a la hora de escribir comentarios que luego es aprovechada por tu editor de código para mostrar su input y output en el lugar en que se está escribiendo su llamada.

/**
 * Displays a notification with customizable options.
 * @param {Object} options - Configuration object for the notification.
 * @param {string} [options.title=''] - Title of the notification.
 * @param {string} [options.message=''] - Content of the notification.
 * @param {'top-right'|'top-left'|'bottom-right'|'bottom-left'} [options.position='top-right'] - Position where the notification appears.
 * @param {number} [options.duration=5000] - Duration in milliseconds before the notification auto-closes.
 * @param {boolean} [options.closeButton=false] - Whether to show a close button.
 * @param {function} [options.log=console.log] - Callback function for logging.
 * @example
 * notify({
 *   title: 'Success!',
 *   message: 'Operation completed.',
 *   position: 'top-right',
 *   duration: 3000
 * })
 */
const notify = ({
  title = '',
  message = '',
  position = 'top-right',
  duration = 5000,
  closeButton = false,
  log = console.log
}) => { /* ... */ }

En este sentido, el propósito de este tipo de comentarios es documentación y por lo tanto, debe cumplir con lo siguiente:

Debe limitarse a describir para qué sirve la función, no cómo funciona.

Debe documentarse únicamente las funciones que componen la interfaz pública.

En general, evita documentar código dentro del flujo esperado de la arquitectura, pues la arquitectura es ya la documentación.

No documentes lo que no hace falta documentar. A veces una línea de código es su propia documentación.

// esto es redundante y no añade nada que no pueda deducirse de la firma de la función
/**
 * Gets a user by an id
 * @param {number} [id] - id 
 * @returns {User}
 */
const getUserById = id => { /* ... */ }

Las funciones ideales a documentar son las que se encuentran en /src/lib, /src/utils, /src/components/base o similas.

Añade herramientas como jsdoc-to-markdown para exportar automáticamente todos los comentarios al directorio /docs como un documento de markdown.
https://www.npmjs.com/package/jsdoc-to-markdown




Explicar código muy tecnico

Independientemente a todo lo anterior, existen casos en que un fragmento de código pertenece a un nicho del conocimiento humano que no todos compartimos y que no forma parte directa del dominio del sistema y, por lo tanto, no está descrito entre los requerimientos ni casos de uso.

En tales casos, es válido y deseable explayarse sobre cómo funciona dicho fragmento de código e incluso añadir links a fuentes de dacumentación externas al proyecto.

// In complex notation, the time and frequency domains each contain one 
// signal made up of N complex points. Each of these complex points is 
// composed of two numbers, the real part and the imaginary part. For 
// example, when we talk about complex sample X[42], it refers to the 
// combination of ReX[42] and ImX[42]. In other words, each complex 
// variable holds two numbers. When two complex variables are multiplied, 
// the four individual components must be combined to form the two 
// components of the product. That is, the singular terms: signal, point, 
// sample, and value, refer to the combination of the real part and the 
// imaginary part.
//
// https://en.wikipedia.org/wiki/Fourier_transform
const fourierTransformation = signals => { /* ... */ }



Magic comments

Existen cierto tipo de comentarios que tienen la intención de ser leídos por interpretes u otros programas.

#!/usr/bin/env node

// ↑ esto se pone en la primer línea de un archivo JavaScript
// para poder ejecutarlo directamente desde el bash.




Anotaciones

En el desarrollo de software existe una metodología de refactorización pasiva conosida como "Filosofía de boyscout". Significa lo siguiente: Cuando visites un lugar, dejalo, no igual a como estaba antes de que llegases, sino un poco mejor.

Si visitas un archivo para añadir una nueva función, tomate un minuto para revisar que no tenga algo sospechoso.

Esto es por supuesto un ideal que no siempre es posible cumplir. Por ello, existe otro uso para los comentarios: Las anotaciones, son comentarios que comienzan con una palabra fetiche para llamar la atención de otros programadores sobre un fragmento de código. A continuación se describen los pertencecientes a la cultura popular, pero es posible definir como equipo las propias.

También considera la posibilidad de usar herramientas de adminsitración de proyectos (Jira, Trello, etc) como alternativa a las anotaciones.


TODO

Usa TODO para denostar una funcionalidad que debería añadirse en un futuro cercano.

const printSalesReport = () => { 
  // TODO: We need the pdf implementation to continue
}


FIXME

Usa FIXME para marcar código que necesita ser reparado.

// FIXME: This returns the same order twice in a row sometimes
const shuffleArray = array => {
  /* ... */
}


OPTIMIZE

Usa OPTIMIZE para hacer enfasis en un fragmento de código que es lento o ineficiente y puede causar problemas de performance en el futuro.

// OPTIMIZE: A subquery in the select section may cause a big performance 
// issue when the number of records grows
db.users.findAll({
  attributes: ['id', 'name', sequelize.literal(`(select count(*) from tasks)`)],
  where: { id }
})


HACK

Usa HACK para señalar código creado con practicas cuestionables y que debería ser refactorizado.

// HACK: This would be cleaner using filter instead
const rooms = []
for (let i; i < response.data.length; i++)
  if (response.data[i].active)
    rooms.push(response.data[i])


REVIEW

Usa REVIEW para todo aquello que necesite una confirmación de que está funcionando como se espera.

// REVIEW: Are we sure the user is intended to get an email at this point 
// of the proces?
const discardTicket = id => {
  /* ... */
  userMailer.send(user)
}





















